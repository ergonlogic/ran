<?php

/**
 * @file
 * Definition of Drupal\ran_queue\Task.
 */

namespace Drupal\ran_queue;

use Drupal\Core\Entity\EntityInterface;

include "../vendor/massivescale/celery-php/celery.php";

class Task {

  function __construct(EntityInterface $entity) {
    $this->queue = new \Celery('localhost', 'guest', 'guest', '/');
    $this->id = $entity->getRevisionId();
    $this->ref_id = $entity->nid->value;
    $this->name = $entity->getTitle();
    $this->type = $entity->bundle();
    // Host Definition
    $this->host_def_vars = $this->getHostDefinition($entity);
    $this->host_def_vars['ran_name'] = $this->name;
    $this->host_def_type = $this->host_def_vars['_system_type'];
    unset($this->host_def_vars['_system_type']);
    // Host Configuration
    $this->host_conf_vars = $this->getHostConfiguration($entity);
    $this->host_conf_types = $this->host_conf_vars['_roles'];
    unset($this->host_conf_vars['_roles']);
    // Host Description
    $this->description = 'Generated by RÃ¡n.';
    $desc = $entity->getFields()['field_ran__description']->getString();
    if (isset($this->vars['_description'])) {
      $this->description = $this->vars['_description'];
      unset($this->vars['_description']);
    }
    $this->org = 'root';
    $this->project = 'default';
    $this->extra_vars = json_encode(array(
      'ran_name' => $this->name,
      'ran_desc' => $this->description,
      'ran_type' => $this->type,
      'ran_def_type' => $this->host_def_type,
      'ran_def_vars' => $this->host_def_vars,
      'ran_conf_types' => $this->host_conf_types,
      'ran_conf_vars' => $this->host_conf_vars,
    ), JSON_UNESCAPED_UNICODE);
  }

  function getVariables(EntityInterface $entity, $prefix = 'field_ran_') {
    $vars =  array();
    $len = strlen($prefix);
    foreach ($entity->getFields() as $name => $field) {
      if (substr($name, 0, $len) == $prefix) {
        if (isset($field->getValue()[0]['value'])) {
          if ($field->getValue()[0]['value'] != '') {
            $vars[substr($name, $len)] = $field->getValue()[0]['value'];
          }
        }
      }
    }
    return $vars;
  }

  function getHostDefinition(EntityInterface $entity, $prefix = 'field_ran_') {
    // TODO: This can't be right... there must be an easier way to access a
    // field collection's fields.
    $field_collection = $entity->getFields()['field_ran_host_definition']->getIterator()[0];
    $fields = $field_collection->getFieldCollectionItem()->getFields();
    $vars =  array();
    $len = strlen($prefix);
    foreach ($fields as $name => $field) {
      if (substr($name, 0, $len) == $prefix) {
        if (isset($field->getValue()[0]['value'])) {
          if ($field->getValue()[0]['value'] != '') {
            $vars[substr($name, $len)] = $field->getValue()[0]['value'];
          }
        }
      }
    }
    return $vars;
  }

  function getHostConfiguration(EntityInterface $entity, $prefix = 'field_ran_') {
    // TODO: This can't be right... there must be an easier way to access a
    // field collection's fields.
    $field_collection = $entity->getFields()['field_ran_host_configuration']->getIterator()[0];
    $fields = $field_collection->getFieldCollectionItem()->getFields();
    $vars =  array();
    $len = strlen($prefix);
    foreach ($fields as $name => $field) {
      if (substr($name, 0, $len) == $prefix) {
        $vars[substr($name, $len)] = array();
        foreach ($field->getIterator() as $object) {
          $vars[substr($name, $len)][] = $object->getString();
        }
        $vars[substr($name, $len)] = array_filter($vars[substr($name, $len)]);
      }
    }
    return $vars;
  }

}
